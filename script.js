const music = document.querySelector('audio');
const prevButton = document.querySelector('#prev');
const playButton = document.querySelector('#play');
const skipButton = document.querySelector('#skip');
const title = document.querySelector('#title');
const artist = document.querySelector('#artist');
const progressContainer = document.querySelector('#progress-container');
const progress = document.querySelector('#progess');
const durationElement = document.querySelector('#duration');
const currentTimeElement = document.querySelector('#current-time');


let isPlaying = false;

const songInfo = [
    {
        name: '01-Doom Eternal',//name of the file in the folder
        displayName : 'Doom Eternal', 
        artist: 'Mick Gordon'
    },
    {
        name: '02-Hell on Earth',//name of the file in the folder
        displayName : 'Hell on Earth', 
        artist: 'Mick Gordon'
    },
    {
        name: '03-Deag Nilox - First Priest Death',//name of the file in the folder
        displayName : 'Deag Nilox - First Priest Death', 
        artist: 'Mick Gordon'
    },
    {
        name: '04-Barging In',//name of the file in the folder
        displayName : 'Barging In', 
        artist: 'Mick Gordon'
    },
    {
        name: '05-Demonic Corruption',//name of the file in the folder
        displayName : 'Demonic Corruption', 
        artist: 'Mick Gordon'
    }

]

function ifDisplayNameIsTooLong(songInfo){
    if (songInfo.displayName.length > 25) {
        title.classList.add('long-title');
    }
    else  (title.classList.remove('long-title'))
}

function playSong() {
    isPlaying = true;

    // change the play icon to pause when pressing play
    playButton.classList.replace('bi-play-fill','bi-pause-fill');

    music.play();
}

function pauseSong() {
    isPlaying = false;

    // change the pause icon to play when pressing pause
    playButton.classList.replace('bi-pause-fill','bi-play-fill');

    music.pause();
}

// play or pause event listener (using ternary operator)
playButton.addEventListener('click', () => (isPlaying ? pauseSong() : playSong()));

// load song in into dom
function loadSong(songInfo){
    title.textContent = songInfo.displayName;
    artist.textContent = songInfo.artist;
    music.src = `./music/${songInfo.name}.m4a`;
    ifDisplayNameIsTooLong(songInfo)
}

// current song:
let songIndex = 2;

// next song:
function skipSong(){
     // every click will be added to the songIndex var
     songIndex++;
     // take the songIndex generated by buttons and add it to loadSong func:
    if (songIndex > songInfo.length -1){
        songIndex = 0;
    }
     loadSong(songInfo[songIndex]);
     playSong();
     }

// previous song:
function prevSong(){
    // every click will be deducted from the songIndex var
    songIndex--;
  
    if (songIndex < 0){
        songIndex = songInfo.length -1;
     }
    loadSong(songInfo[songIndex]);
    playSong();
}

// load song into the dom based on songIndex input
// if songIndex = 2 then loadSong func will load the third index in the songInfo array
loadSong(songInfo[songIndex]);

// update progess bar and time 
function updateProgressBar(e) {
    if (isPlaying) {
        // object destructuring:
        const { duration, currentTime } = music;
        // update progress bar width
        const progressPercentage = (currentTime / duration) * 100;
        // change width in css ( covert number to string )
        progress.style.width = `${progressPercentage}%`;
        // display duration
        const durationMinutes = Math.floor(duration / 60);
        let durationSeconds = Math.floor(duration % 60);
        // avoid NaN
        if (durationSeconds) {
            durationElement.textContent = `${durationMinutes}:${durationSeconds}`;
        }

        // display current time:
        const currentMinutes = Math.floor(currentTime / 60);
        let currentSeconds = Math.floor(currentTime % 60);        
        // avoid NaN
        if (currentSeconds) {
        currentTimeElement.textContent = `${currentMinutes}:${currentSeconds}`;
        }
        
    }
}

// set progess bar:
    function setProgressBar(e) {
        // total width
        const width = this.clientWidth;
        // current width when clicked
        const clickX = e.offsetX;
        const { duration } = music;
        music.currentTime = (clickX / width) * duration;
    }

// add event listener to the buttons
prevButton.addEventListener('click', prevSong);
skipButton.addEventListener('click', skipSong);

// progress bar event:
music.addEventListener('timeupdate', updateProgressBar);

// set progress bar event:
progressContainer.addEventListener('click', setProgressBar);

music.addEventListener('ended', skipSong);